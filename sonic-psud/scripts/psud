#!/usr/bin/env python2

"""
    psud
    PSU information update daemon for SONiC
    This daemon will loop to collect PSU related information and then write the information to state DB.
    Currently it is implemented based on old plugins rather than new platform APIs. So the PSU information just
    includes three things: number of PSU, PSU presence and PSU status which is supported by old plugins.
    The loop interval is PSU_INFO_UPDATE_PERIOD_SECS in seconds.
"""

try:
    import sys
    import time
    from swsscommon import swsscommon
    from sonic_daemon_base.daemon_base import DaemonBase
except ImportError, e:
    raise ImportError (str(e) + " - required module not found")

#============================= Constants =============================

PLATFORM_SPECIFIC_MODULE_NAME = "psuutil"
PLATFORM_SPECIFIC_CLASS_NAME = "PsuUtil"

PSU_INFO_UPDATE_PERIOD_SECS = 3

class DaemonPsud(DaemonBase):
    def __init__(self):
        DaemonBase.__init__(self)

    def __exit__(self):
        DaemonBase.__exit__(self)

    def run(self):
        # Load platform-specific psuutil class
        platform_psuutil = self.load_platform_util(PLATFORM_SPECIFIC_MODULE_NAME, PLATFORM_SPECIFIC_CLASS_NAME)
        if not platform_psuutil:
            self.log_error("failed to load psuutil")
            sys.exit(1)

        state_db = self.db_connect(swsscommon.STATE_DB)
        psu_tbl = swsscommon.Table(state_db, "PSU_INFO")
        chassis_tbl = swsscommon.Table(state_db, "CHASSIS_INFO")
        num_psus = platform_psuutil.get_num_psus()
        fvs = swsscommon.FieldValuePairs([('num_psus', str(num_psus))])
        chassis_tbl.set('chassis 1', fvs)

        # Start main loop to listen to the PSU change event.
        self.log_info("Start main loop")
        while True:
            psu_db_update(platform_psuutil, psu_tbl, num_psus)
            time.sleep(PSU_INFO_UPDATE_PERIOD_SECS)

        # Clean all the information from DB and then exit
        for psu_index in range(1, num_psus + 1):
            psu_tbl._del("PSU {}".format(psu_index))
        chassis_tbl._del('chassis 1')
        return 1

def psu_db_update(psuutil, psu_tbl, num_psus):
    for psu_index in range(1, num_psus + 1):
        fvs = swsscommon.FieldValuePairs([('presence',
                                           'true' if psuutil.get_psu_presence(psu_index) else 'false'),
                                          ('status',
                                           'true' if psuutil.get_psu_status(psu_index) else 'false')])
        psu_tbl.set("PSU {}".format(psu_index), fvs)

def main():
    daemon_psud = DaemonPsud()
    if not daemon_psud:
        print "Failed to load psu daemon utilities"
        sys.exit(1)

    daemon_psud.run()

if __name__ == '__main__':
    main()
