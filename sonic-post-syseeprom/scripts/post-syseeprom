#!/usr/bin/env python2

'''
    post-syseeprom
    Syseeprom information gathering tool for SONiC
    This tool will be started during the start phase of pmon container, gathering syseeprom info and write to state DB.
    It's an one-shot task since syseeprom info are static.
    With this tool, show syseeprom CLI will be able to get data from state DB instead of access hw or cache.
'''

try:
    from sonic_daemon_base.daemon_base import DaemonBase
    from sonic_daemon_base.daemon_base import Logger
    from sonic_daemon_base import daemon_base
    import argparse
    from swsscommon import swsscommon
except ImportError, e:
    raise ImportError (str(e) + " - required module not found")

PLATFORM_SPECIFIC_MODULE_NAME = 'eeprom'
PLATFORM_SPECIFIC_CLASS_NAME = 'board'

ERR_PLATFORM_NOT_SUPPORT = 1
ERR_FAILED_EEPROM = 2
ERR_FAILED_UPDATE_DB = 3

EEPROM_TABLE_NAME = 'EEPROM_INFO'
SYSLOG_IDENTIFIER = 'post-syseeprom'

# Global logger class instance
logger = Logger(SYSLOG_IDENTIFIER)

def main():
    parser = argparse.ArgumentParser(description='post-syseeprom tool')
    parser.add_argument("-w", "--write", help="write syseeprom info into state DB", action='store_true')
    parser.add_argument("-c", "--clear", help="remove syseeprom info from state DB", action='store_true')
    args = parser.parse_args()

    Daemon_Base = DaemonBase()
    (platform_path, hwsku_path) = Daemon_Base.get_path_to_platform_and_hwsku()

    # Arista platform have their own implementation for eeprom tlv parsing, it's not inherited from eeprom base class.
    # So for now this tool can not support Arista platform, but this will not cause any issue on them. 
    # decode-syseeprom scripts will cover Arista case, it will still read from HW/cache instead from DB on Arista platform.  
    if 'arista' in platform_path:
        logger.log_warning("Arista platform does not support this yet")
        return ERR_PLATFORM_NOT_SUPPORT

    if args.write:
        eeprom_util = Daemon_Base.load_platform_util(PLATFORM_SPECIFIC_MODULE_NAME, PLATFORM_SPECIFIC_CLASS_NAME)
        eeprom = eeprom_util.read_eeprom()
        if eeprom is None :
            logger.log_error("Failed to read eeprom")
            return ERR_FAILED_EEPROM

        err = eeprom_util.update_eeprom_db(eeprom)
        if err:
            logger.log_error("Failed to update eeprom info to database")
            return ERR_FAILED_UPDATE_DB
    elif args.clear:
        state_db = daemon_base.db_connect(swsscommon.STATE_DB)
        eeprom_tbl = swsscommon.Table(state_db, EEPROM_TABLE_NAME)
        keys = eeprom_tbl.getKeys()
        for key in keys:
            eeprom_tbl._del(key)
    else:
        logger.log_error("Invalid parameter")

if __name__ == '__main__':
    main()
