#!/usr/bin/env python3

"""
    pcied
    PCIe device monitoring daemon for SONiC
"""

try:
    import os
    import signal
    import sys
    import threading

    from sonic_py_common import daemon_base, device_info
    from swsscommon import swsscommon
except ImportError as e:
    raise ImportError(str(e) + " - required module not found")

#
# Constants ====================================================================
#
SYSLOG_IDENTIFIER = "pcied"

PCIE_RESULT_REGEX = "PCIe Device Checking All Test"
PCIE_TABLE_NAME = "PCIE_STATUS"
PCIE_DEVICE_TABLE_NAME = "PCIE_DEVICE"

PCIE_CONF_FILE = 'pcie.yaml'

PCIED_MAIN_THREAD_SLEEP_SECS = 60
REDIS_HOSTIP = "127.0.0.1"

#
# Daemon =======================================================================
#


class DaemonPcied(daemon_base.DaemonBase):
    def __init__(self, log_identifier):
        super(DaemonPcied, self).__init__(log_identifier)

        (platform_path, _) = device_info.get_paths_to_platform_and_hwsku_dirs()
        pciefilePath = os.path.join(platform_path, PCIE_CONF_FILE)
        if not os.path.exists(pciefilePath):
            self.log_error("Platform pcie configuration file doesn't exist! Exiting ...")
            sys.exit("Platform PCIe Configuration file doesn't exist!")

        self.timeout = PCIED_MAIN_THREAD_SLEEP_SECS
        self.stop_event = threading.Event()

        self.state_db = swsscommon.SonicV2Connector(host=REDIS_HOSTIP)
        self.state_db.connect("STATE_DB")
        state_db = daemon_base.db_connect("STATE_DB")
        self.device_table = swsscommon.Table(state_db, PCIE_DEVICE_TABLE_NAME)

    # Load AER-fields into STATEDB
    def update_aer_to_statedb(self, device_name, aer_stats):

        aer_fields = {}

        for field, value in aer_stats['correctable'].items():
            correctable_field = "correctable|" + field
            aer_fields[correctable_field] = value

        for field, value in aer_stats['fatal'].items():
            fatal_field = "fatal|" + field
            aer_fields[fatal_field] = value

        for field, value in aer_stats['non_fatal'].items():
            non_fatal_field = "non_fatal|" + field
            aer_fields[non_fatal_field] = value

        if aer_fields:
            formatted_fields = swsscommon.FieldValuePairs(list(aer_fields.items()))
            self.device_table.set(device_name, formatted_fields)
        else:
            self.log_debug("PCIe device {} has no AER attriutes".format(device_name))

    # Check the PCIe devices
    def check_pcie_devices(self):
        try:
            platform_path, _ = device_info.get_paths_to_platform_and_hwsku_dirs()
            from sonic_platform_base.sonic_pcie.pcie_common import PcieUtil
            platform_pcieutil = PcieUtil(platform_path)
        except ImportError as e:
            self.log_error("Failed to load default PcieUtil module. Error : {}".format(str(e)), True)
            raise e

        resultInfo = platform_pcieutil.get_pcie_check()
        err = 0

        for item in resultInfo:
            if item["result"] == "Failed":
                self.log_warning("PCIe Device: " + item["name"] + " Not Found")
                err += 1

        if err:
            self.update_state_db("PCIE_DEVICES", "status", "FAILED")
            self.log_error("PCIe device status check : FAILED")
        else:
            self.update_state_db("PCIE_DEVICES", "status", "PASSED")
            self.log_info("PCIe device status check : PASSED")

        # update AER-attributes to DB
        for item in resultInfo:
            if item["result"] == "Failed":
                continue

            Bus = int(item["bus"], 16)
            Dev = int(item["dev"], 16)
            Fn = int(item["fn"], 16)

            device_name = "%02x:%02x.%d" % (Bus, Dev, Fn)
            dev_id_path = '/sys/bus/pci/devices/0000:%s/device' % device_name
            with open(dev_id_path, 'r') as fd:
                Id = fd.read().strip()

            self.device_table.set(device_name, [('id', Id)])
            aer_stats = platform_pcieutil.get_pcie_aer_stats(bus=Bus, device=Dev, func=Fn)
            self.update_aer_to_statedb(device_name, aer_stats)

    def read_state_db(self, key1, key2):
        return self.state_db.get('STATE_DB', key1, key2)

    def update_state_db(self, key1, key2, value):
        self.state_db.set('STATE_DB', key1, key2, value)

    # Signal handler
    def signal_handler(self, sig, frame):
        if sig == signal.SIGHUP:
            self.log_info("Caught SIGHUP - ignoring...")
        elif sig == signal.SIGINT:
            self.log_info("Caught SIGINT - exiting...")
            self.stop_event.set()
        elif sig == signal.SIGTERM:
            self.log_info("Caught SIGTERM - exiting...")
            self.stop_event.set()
        else:
            self.log_warning("Caught unhandled signal '" + sig + "'")

    # Initialize daemon
    def init(self):
        self.log_info("Start daemon init...")

    # Deinitialize daemon
    def deinit(self):
        self.log_info("Start daemon deinit...")

    # Run daemon
    def run(self):
        self.log_info("Starting up...")

        # Start daemon initialization sequence
        self.init()

        # Start main loop
        self.log_info("Start daemon main loop")

        while not self.stop_event.wait(self.timeout):
            # Check the Pcie device status
            self.check_pcie_devices()

        self.log_info("Stop daemon main loop")

        # Start daemon deinitialization sequence
        self.deinit()

        self.log_info("Shutting down...")

#
# Main =========================================================================
#


def main():
    pcied = DaemonPcied(SYSLOG_IDENTIFIER)
    pcied.run()

if __name__ == '__main__':
    main()
