#!/usr/bin/env python3

"""
    pcied
    PCIe device monitoring daemon for SONiC
"""

try:
    import os
    import signal
    import sys
    import threading

    from sonic_py_common import daemon_base, device_info
    from swsscommon import swsscommon
except ImportError as e:
    raise ImportError(str(e) + " - required module not found")

#
# Constants ====================================================================
#
SYSLOG_IDENTIFIER = "pcied"

PCIE_RESULT_REGEX = "PCIe Device Checking All Test"
PCIE_DEVICE_TABLE_NAME = "PCIE_DEVICE"

PCIE_CONF_FILE = 'pcie.yaml'

PCIED_MAIN_THREAD_SLEEP_SECS = 60

PCIEUTIL_LOAD_ERROR = 1

platform_pcieutil = None

exit_code = 0
#
# Daemon =======================================================================
#


class DaemonPcied(daemon_base.DaemonBase):
    def __init__(self, log_identifier):
        super(DaemonPcied, self).__init__(log_identifier)

        global platform_pcieutil

        (platform_path, _) = device_info.get_paths_to_platform_and_hwsku_dirs()
        pciefilePath = os.path.join(platform_path, PCIE_CONF_FILE)
        if not os.path.exists(pciefilePath):
            self.log_error("Platform pcie configuration file doesn't exist! Exiting ...")
            sys.exit("Platform PCIe Configuration file doesn't exist!")

        try:
            from sonic_platform_base.sonic_pcie.pcie_common import PcieUtil
            platform_pcieutil = PcieUtil(platform_path)
        except ImportError as e:
            self.log_error("Failed to load default PcieUtil module. Error : {}".format(str(e)), True)
            sys.exit(PCIEUTIL_LOAD_ERROR)

        self.timeout = PCIED_MAIN_THREAD_SLEEP_SECS
        self.stop_event = threading.Event()

        # Connect to STATE_DB and create pcie device table
        state_db = daemon_base.db_connect("STATE_DB")
        self.device_table = swsscommon.Table(state_db, PCIE_DEVICE_TABLE_NAME)

    def __del__(self):
        # Delete all the information from DB and then exit
        prefix = PCIE_DEVICE_TABLE_NAME
        _hash = '{}{}'.format(prefix, '*')
        table_keys = db.keys(db.STATE_DB, _hash)
        if table_keys is not None:
            for tk in table_keys:
                self.device_table._del(tk)

    # load aer-fields into statedb
    def update_aer_to_statedb(self, device_name, aer_stats):

        aer_fields = {}

        for field, value in aer_stats['correctable'].items():
            correctable_field = "correctable|" + field
            aer_fields[correctable_field] = value

        for field, value in aer_stats['fatal'].items():
            fatal_field = "fatal|" + field
            aer_fields[fatal_field] = value

        for field, value in aer_stats['non_fatal'].items():
            non_fatal_field = "non_fatal|" + field
            aer_fields[non_fatal_field] = value

        if aer_fields:
            formatted_fields = swsscommon.FieldValuePairs(list(aer_fields.items()))
            self.device_table.set(device_name, formatted_fields)
        else:
            self.log_debug("PCIe device {} has no AER attriutes".format(device_name))

    # Check the PCIe devices
    def check_pcie_devices(self):
       if not platform_pcieutil:
            return

        resultInfo = platform_pcieutil.get_pcie_check()
        err = 0

        for item in resultInfo:
            if item["result"] == "Failed":
                self.log_warning("PCIe Device: " + item["name"] + " Not Found")
                err += 1

        if err:
            self.update_state_db("PCIE_DEVICES", "status", "FAILED")
            self.log_error("PCIe device status check : FAILED")
        else:
            self.update_state_db("PCIE_DEVICES", "status", "PASSED")
            self.log_info("PCIe device status check : PASSED")

        # update AER-attributes to DB
        for item in resultInfo:
            if item["result"] == "Failed":
                continue

            Bus = int(item["bus"], 16)
            Dev = int(item["dev"], 16)
            Fn = int(item["fn"], 16)

            device_name = "%02x:%02x.%d" % (Bus, Dev, Fn)
            dev_id_path = '/sys/bus/pci/devices/0000:%s/device' % device_name
            with open(dev_id_path, 'r') as fd:
                Id = fd.read().strip()

            self.device_table.set(device_name, [('id', Id)])
            aer_stats = platform_pcieutil.get_pcie_aer_stats(bus=Bus, device=Dev, func=Fn)
            self.update_aer_to_statedb(device_name, aer_stats)

    def update_state_db(self, key1, key2, value):
        self.state_db.set('STATE_DB', key1, key2, value)

   # Override signal handler from DaemonBase
    def signal_handler(self, sig, frame):
        FATAL_SIGNALS = [signal.SIGINT, signal.SIGTERM]
        NONFATAL_SIGNALS = [signal.SIGHUP]

        global exit_code

        if sig in FATAL_SIGNALS:
            self.log_info("Caught signal '{}' - exiting...".format(signal.SIGINT.name))
            exit_code = 128 + sig  # Make sure we exit with a non-zero code so that supervisor will try to restart us
            self.stop_event.set()
        elif sig in NONFATAL_SIGNALS:
            self.log_info("Caught signal '{}' - ignoring...".format(signal.SIGINT.name))
        else:
            self.log_warning("Caught unhandled signal '{}' - ignoring...".format(signal.SIGINT.name))

    # Main daemon logic
    def run(self):
        if self.stop_event.wait(self.timeout):
            # We received a fatal signal
            return False

        self.check_pcie_devices()

        return True
#
# Main =========================================================================
#


def main():
    pcied = DaemonPcied(SYSLOG_IDENTIFIER)

    pcied.log_info("Starting up...")

    while pcied.run():
        pass

    pcied.log_info("Shutting down...")

    return exit_code

if __name__ == '__main__':
    sys.exit(main())
