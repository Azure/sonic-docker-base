#!/usr/bin/env python2

"""
    pcied
    PCIe device monitoring daemon for SONiC
"""

try:
    import os
    import signal
    import threading
    import subprocess
    from sonic_daemon_base.daemon_base import Logger
    from sonic_daemon_base.daemon_base import DaemonBase
    import swsssdk
except ImportError, e:
    raise ImportError (str(e) + " - required module not found")

#
# Constants ====================================================================
#
PCIE_RESULT_REGIX = "PCIe Device Checking All Test"
PCIE_TABLE_NAME = "PCIE_STATUS"
SYSLOG_IDENTIFIER = "pcied"

PCIED_MAIN_THREAD_SLEEP_SECS = 60
REDIS_HOSTIP = "127.0.0.1"

# Global logger class instance
logger = Logger(SYSLOG_IDENTIFIER)

#
# Daemon =======================================================================
#

class DaemonPcied(DaemonBase):
    def __init__(self):
        DaemonBase.__init__(self)

        self.timeout = PCIED_MAIN_THREAD_SLEEP_SECS
        self.stop_event = threading.Event()

        self.state_db = swsssdk.SonicV2Connector(host=REDIS_HOSTIP)
        self.state_db.connect("STATE_DB")


    def check_pcie_devices():
        tmp_pcie_status_f="/tmp/pcie_status_f"
        os.system('sudo pcieutil pcie-check | grep "%s" > %s'%(PCIE_RESULT_REGIX, tmp_pcie_status_f))
        f=open(tmp_pcie_status_f, "r")
        pcie_status = f.readline()
        if "PASSED" in pcie_status:
            self.update_state_db("PCIE_STATUS|", "PCIE_DEVICES", "PASSED")
            logger.log_info("PCIe device status check : PASSED")
        else:
            self.update_state_db("PCIE_STATUS|", "PCIE_DEVICES", "FAILED")
            logger.log_info("PCIe device status check : FAILED")


    def update_state_db(self, key1, key2, value):
        self.state_db.set('STATE_DB', key1, key2, value)


    # Signal handler
    def signal_handler(self, sig, frame):
        if sig == signal.SIGHUP:
            logger.log_info("Caught SIGHUP - ignoring...")
        elif sig == signal.SIGINT:
            logger.log_info("Caught SIGINT - exiting...")
            self.stop_event.set()
        elif sig == signal.SIGTERM:
            logger.log_info("Caught SIGTERM - exiting...")
            self.stop_event.set()
        else:
            logger.log_warning("Caught unhandled signal '" + sig + "'")

    # Initialize daemon
    def init(self):
        logger.log_info("Start daemon init...")

    # Deinitialize daemon
    def deinit(self):
        logger.log_info("Start daemon deinit...")

    # Run daemon
    def run(self):
        logger.log_info("Starting up...")

        # Start daemon initialization sequence
        self.init()

        # Start main loop
        logger.log_info("Start daemon main loop")

        while not self.stop_event.wait(self.timeout):
            # Check the Pcie device status
            self.check_pcie_devices()

        logger.log_info("Stop daemon main loop")

        # Start daemon deinitialization sequence
        self.deinit()

        logger.log_info("Shutting down...")

#
# Main =========================================================================
#

def main():
    pcied = DaemonPcied()
    pcied.run()

if __name__ == '__main__':
    main()
