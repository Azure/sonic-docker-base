#!/usr/bin/env python2

"""
    pcied
    PCIe device monitoring daemon for SONiC
"""

try:
    import os
    import signal
    import threading
    import subprocess
    from sonic_daemon_base.daemon_base import Logger
    from sonic_daemon_base.daemon_base import DaemonBase
except ImportError, e:
    raise ImportError (str(e) + " - required module not found")

#
# Constants ====================================================================
#

SYSLOG_IDENTIFIER = "pcied"

PCIED_MAIN_THREAD_SLEEP_SECS = 60

# Global logger class instance
logger = Logger(SYSLOG_IDENTIFIER)

#
# Helper functions =============================================================
#
def check_pcie_devices():
    cmd = [ 'sudo', 'pcieutil', 'pcie-check' ]
    tmp_pcie_status_f="/tmp/pcie_status_f"
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)
    resultInfo, err = p.communicate()
    if not err:
        os.system('redis-cli -n 6 GET "PCIE_STATE|system" > %s'%tmp_pcie_status_f)
        f=open(tmp_pcie_status_f, "r")
        pcie_status = f.readline()
        if "1" in pcie_status:
            logger.log_info("PCIe device status check : PASSED")
        else:
            logger.log_info("PCIe device status check : FAILED")

#
# Daemon =======================================================================
#

class DaemonPcied(DaemonBase):
    def __init__(self):
        DaemonBase.__init__(self)

        self.timeout = PCIED_MAIN_THREAD_SLEEP_SECS
        self.stop_event = threading.Event()

    # Signal handler
    def signal_handler(self, sig, frame):
        if sig == signal.SIGHUP:
            logger.log_info("Caught SIGHUP - ignoring...")
        elif sig == signal.SIGINT:
            logger.log_info("Caught SIGINT - exiting...")
            self.stop_event.set()
        elif sig == signal.SIGTERM:
            logger.log_info("Caught SIGTERM - exiting...")
            self.stop_event.set()
        else:
            logger.log_warning("Caught unhandled signal '" + sig + "'")

    # Initialize daemon
    def init(self):
        logger.log_info("Start daemon init...")

    # Deinitialize daemon
    def deinit(self):
        logger.log_info("Start daemon deinit...")

    # Run daemon
    def run(self):
        logger.log_info("Starting up...")

        # Start daemon initialization sequence
        self.init()

        # Start main loop
        logger.log_info("Start daemon main loop")

        while not self.stop_event.wait(self.timeout):
            # Check the Pcie device status
            check_pcie_devices()

        logger.log_info("Stop daemon main loop")

        # Start daemon deinitialization sequence
        self.deinit()

        logger.log_info("Shutting down...")

#
# Main =========================================================================
#

def main():
    pcied = DaemonPcied()
    pcied.run()

if __name__ == '__main__':
    main()
